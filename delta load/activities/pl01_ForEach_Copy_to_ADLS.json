{
    "name": "ForEach_Copy_to_ADLS",
    "type": "ForEach",
    "dependsOn": [
        {
            "activity": "Lookup_Configuration_Data",
            "dependencyConditions": [
                "Succeeded"
            ]
        }
    ],
    "userProperties": [],
    "typeProperties": {
        "items": {
            "value": "@activity('Lookup_Configuration_Data').output.value",
            "type": "Expression"
        },
        "isSequential": false,
        "activities": [
            {
                "name": "Lookup_TableCount",
                "type": "Lookup",
                "dependsOn": [],
                "policy": {
                    "timeout": "7.00:00:00",
                    "retry": 0,
                    "retryIntervalInSeconds": 30,
                    "secureOutput": false,
                    "secureInput": false
                },
                "userProperties": [],
                "typeProperties": {
                    "source": {
                        "type": "OracleSource",
                        "oracleReaderQuery": {
                            "value": "SELECT COUNT(*) AS datacount FROM @{item().Schema}.@{item().Table} WHERE ((to_char(@{item().InsertDateField}, 'yyyy-MM-dd') = '@{formatDateTime(utcnow(), 'yyyy-MM-dd')}') OR (to_char(@{item().UpdateDateField}, 'yyyy-MM-dd') = '@{formatDateTime(utcnow(), 'yyyy-MM-dd')}')) @{if(equals(item().PMC,'Yes') , ' AND PRINCIPAL_MAP_CD = 1','')} ",
                            "type": "Expression"
                        },
                        "partitionOption": "None",
                        "queryTimeout": "02:00:00"
                    },
                    "dataset": {
                        "referenceName": "DS01_OracleTable",
                        "type": "DatasetReference",
                        "parameters": {
                            "tablename": {
                                "value": "@{item().Table}",
                                "type": "Expression"
                            },
                            "schemaname": {
                                "value": "@{item().Schema}",
                                "type": "Expression"
                            }
                        }
                    },
                    "firstRowOnly": false
                }
            },
            {
                "name": "TableCount_Check_",
                "type": "IfCondition",
                "dependsOn": [
                    {
                        "activity": "Lookup_TableCount",
                        "dependencyConditions": [
                            "Succeeded"
                        ]
                    }
                ],
                "userProperties": [],
                "typeProperties": {
                    "expression": {
                        "value": "@equals(activity('Lookup_TableCount').output.value[0].datacount, 0)",
                        "type": "Expression"
                    },
                    "ifFalseActivities": [
                        {
                            "name": "Copy_ORAC_TO_ADLS",
                            "type": "Copy",
                            "dependsOn": [],
                            "policy": {
                                "timeout": "7.00:00:00",
                                "retry": 0,
                                "retryIntervalInSeconds": 30,
                                "secureOutput": false,
                                "secureInput": false
                            },
                            "userProperties": [],
                            "typeProperties": {
                                "source": {
                                    "type": "OracleSource",
                                    "oracleReaderQuery": {
                                        "value": "SELECT * FROM @{item().Schema}.@{item().Table} WHERE ((to_char(@{item().InsertDateField}, 'yyyy-MM-dd') = '@{formatDateTime(utcnow(), 'yyyy-MM-dd')}') OR (to_char(@{item().UpdateDateField}, 'yyyy-MM-dd') = '@{formatDateTime(utcnow(), 'yyyy-MM-dd')}')) @{if(equals(item().PMC,'Yes') , ' AND PRINCIPAL_MAP_CD = 1','')} ",
                                        "type": "Expression"
                                    },
                                    "partitionOption": "None",
                                    "queryTimeout": "02:00:00"
                                },
                                "sink": {
                                    "type": "AvroSink",
                                    "storeSettings": {
                                        "type": "AzureBlobFSWriteSettings"
                                    },
                                    "formatSettings": {
                                        "type": "AvroWriteSettings",
                                        "quoteAllText": true
                                    }
                                },
                                "enableStaging": false,
                                "enableSkipIncompatibleRow": true,
                                "redirectIncompatibleRowSettings": {
                                    "linkedServiceName": {
                                        "referenceName": "IncompatibleData",
                                        "type": "LinkedServiceReference"
                                    },
                                    "path": {
                                        "value": "@concat('poc/Incompatible Data/',item().Table,'/')",
                                        "type": "Expression"
                                    }
                                }
                            },
                            "inputs": [
                                {
                                    "referenceName": "DS01_OracleTable",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "tablename": {
                                            "value": "@{item().Table}",
                                            "type": "Expression"
                                        },
                                        "schemaname": {
                                            "value": "@{item().Schema}",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ],
                            "outputs": [
                                {
                                    "referenceName": "DS04_AvroFiles",
                                    "type": "DatasetReference",
                                    "parameters": {
                                        "File_Name": {
                                            "value": "@concat(item().Table,'_',formatDateTime(utcnow(),'yyyy-MM-dd'))",
                                            "type": "Expression"
                                        },
                                        "Container_Name": {
                                            "value": "@if(equals(formatDateTime(utcnow(),'MMMM'),'January'),concat('FY_',formatDateTime(subtractFromTime(utcnow(),1,'Year'),'yyyy'),'-',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MMMM')),if(equals(formatDateTime(utcnow(),'MMMM'),'February'),concat('FY_',formatDateTime(subtractFromTime(utcnow(),1,'Year'),'yyyy'),'-',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MMMM')),if(equals(formatDateTime(utcnow(),'MMMM'),'March'),concat('FY_',formatDateTime(subtractFromTime(utcnow(),1,'Year'),'yyyy'),'-',formatDateTime(utcnow(),'yyyy'),'/',formatDateTime(utcnow(),'MMMM')),concat('FY_',formatDateTime(utcnow(),'yyyy'),'-',formatDateTime(addToTime(utcnow(),1,'Year'),'yyyy'),'/',formatDateTime(utcnow(),'MMMM')))))",
                                            "type": "Expression"
                                        },
                                        "Folder_Name": {
                                            "value": "@item().Table",
                                            "type": "Expression"
                                        }
                                    }
                                }
                            ]
                        }
                    ]
                }
            }
        ]
    }
}